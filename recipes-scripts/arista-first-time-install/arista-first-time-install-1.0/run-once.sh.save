#!/bin/bash
# First-time install for Arista instruments
export NEW_PRIMARY_PARTITION=$(echo n; echo p)
export FIRST_AVAILABLE_BLOCK=$(echo;)
export ALL_REMAINING_SPACE=$(echo;)
export WRITE_PARTITIONS=$(echo w);
export PGTUNE_CHANGES="
# Modified pgtune parameters
default_statistics_target = 50 # pgtune wizard 2014-04-18
maintenance_work_mem = 32MB # pgtune wizard 2014-04-18
constraint_exclusion = on # pgtune wizard 2014-04-18
checkpoint_completion_target = 0.9 # pgtune wizard 2014-04-18
effective_cache_size = 512MB # pgtune wizard 2014-04-18
work_mem = 64MB # pgtune wizard 2014-04-18
wal_buffers = 8MB # pgtune wizard 2014-04-18
checkpoint_segments = 16 # pgtune wizard 2014-04-18
shared_buffers = 256MB # pgtune wizard 2014-04-18
max_connections = 12 # pgtune wizard 2014-04-18
"
export SVN_CHANGES="
# Parameters copied from SVN's settings
listen_addresses = '*'
checkpoint_timeout = 15min
seq_page_cost = 1.0
random_page_cost = 1.5
log_destination = 'stderr'
logging_collector = on
log_directory = 'pg_log'
log_filename = 'postgresql-%a.log'
log_truncate_on_rotation = on
log_rotation_age = 1d
log_rotation_size = 0
log_line_prefix = '< %m >'
#log_timezone = 'US/Central'
#timezone = 'US/Central'
"

# Add JAVA to the system's path
export PATH=$PATH:/usr/java/bin
echo PATH=\$PATH:/usr/java/bin >> /etc/profile

# Install PIP
easy3_install pip

# Format and partition the external drive if present.
if [ -b /dev/sda ]
then	umount /dev/sda*
	dd if=/dev/zero of=/dev/sda bs=512 count=1
	fdisk /dev/sda << EOF
${NEW_PRIMARY_PARTITION}
1
${FIRST_AVAILABLE_BLOCK}
${ALL_REMAINING_SPACE}
${WRITE_PARTITIONS}
EOF
	mke2fs -t ext4 -L "arista" /dev/sda1
fi

# Create the standard mount point
mkdir /arista
echo "/dev/sda1	/arista	ext4	defaults	0	2" >> /etc/fstab

# Mount and initialize the new partition
mount /dev/sda1
mkdir /arista/log
mkdir /arista/database
chown postgres:postgres /arista/database

# Setup the hosts file
echo 127.0.0.1	postgres-dev.practichem.com	postgres-dev >> /etc/hosts

# Setup and initialize the database
sed -i -e "s:^PGDATA=/var/lib/postgresql/data$:PGDATA=/arista/database:" /etc/init.d/postgresql-server
sed -i -e "s:^PGLOG=/var/lib/postgresql/pgstartup.log$:PGLOG=/arista/log/postgres-startup.log:" /etc/init.d/postgresql-server
sudo -u postgres initdb -D /arista/database
sed -i -e "s:^host    all             all             127.0.0.1/32            ident$:host    all             all             127.0.0.1/32            md5:" /arista/database/pg_hba.conf
echo "${PGTUNE_CHANGES}${SVN_CHANGES}" >> /arista/database/postgresql.conf

# Create the user, database, and schema.
service postgresql-server start
sudo -u postgres psql -c "CREATE USER minot WITH PASSWORD 'minot';"
sudo -u postgres psql -c "CREATE DATABASE minotdb WITH OWNER=minot;"
export PGPASSWORD=minot
psql -h localhost -U minot -d minotdb -c 'CREATE SCHEMA minot'

# Download and install the latest webapp
# TODO:  Examine alternate ways to get the following file
svn --non-interactive --trust-server-cert export https://svn.practichem.com/repos/code/trunk/release/update-build-latest.tgz /arista/
cd /arista/
tar -zxf update-build-latest.tgz
rm update-build-latest.tgz
cd arista-install/
./install.sh

# Enable services
for SERVICE in postgresql-server ntpd protocolbridge webapp
do
	chkconfig --add $SERVICE
	chkconfig $SERVICE on
done

# Start services
service ntpd start
service protocolbridge start
service webapp start

# Create an SSL key for nginx
mkdir /etc/nginx/ssl
openssl req -x509 -nodes -days 7000 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt -batch

# Clean up
rm -rf /arista/arista-install
